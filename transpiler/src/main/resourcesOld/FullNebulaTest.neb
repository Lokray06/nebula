// FullLanguageTest.neb - Comprehensive test file for Nebula parser and upcoming semantic analysis

// Namespace declaration with nested namespaces
namespace Com.NebulaLang.Core {
    // A utility class with a static method
    class Console {
        public static void writeLine(String message) {
            // Placeholder for native print functionality
        }

        public static int readInt() {
            // Placeholder for native read functionality
            return 0;
        }
    }
}

namespace MyAwesomeApp {

    // A simple data class
    class Point {
        public int x = 4;
        public int z = 2;
        public int y = 0;

        // Constructor with parameters
        public Point(int initialX, int initialY) {
            this.x = initialX; // Usage of 'this'
            this.y = initialY;
            Com.NebulaLang.Core.Console.writeLine("Point created at (" + initialX + ", " + initialY + ")");
        }

        // Method with return type and parameters
        public double calculateDistance(Point otherPoint) {
            int dx = this.x - otherPoint.x;
            int dy = this.y - otherPoint.y;
            // Demonstrating complex arithmetic and type conversion (conceptual)
            return (dx * dx) + (dy * dy); // Return statement with expression
        }

        // Method demonstrating multiple return statements
        public bool isOrigin() {
            if (this.x == 0 && this.y == 0) {
                return true;
            }
            return false;
        }
    }

    // Main application class
    class Program {
        private static int globalCounter = 10; // Field declaration with initializer

        public static void main() {
            Com.NebulaLang.Core.Console.writeLine("--- Starting Full Language Test ---");

            // 1. Variable Declarations
            int i = 0;
            bool flag = true;
            String text = "Initial string.";
            double decimalValue = 123.45;
            var dynamicData = "Dynamic!"; // 'var' keyword

            // 2. Simple Assignments
            i = 1;
            flag = false;
            text = "Updated string.";
            decimalValue = 67.89;

            // 3. Compound Assignments
            i += 5; // i = 6
            decimalValue -= 10.0; // decimalValue = 57.89
            globalCounter *= 2; // globalCounter = 20
            decimalValue /= 2.0; // decimalValue = 28.945
            i %= 3; // i = 0 (6 % 3 = 0)

            Com.NebulaLang.Core.Console.writeLine("i after compound assigns: " + i);
            Com.NebulaLang.Core.Console.writeLine("decimalValue after compound assigns: " + decimalValue);
            Com.NebulaLang.Core.Console.writeLine("globalCounter after compound assigns: " + globalCounter);

            // 4. Unary Operators (Prefix Increment/Decrement, Logical NOT, Negation)
            int x = 5;
            int y = ++x;   // x becomes 6, y becomes 6
            int z = --y;   // y becomes 5, z becomes 5
            bool isFalse = !flag; // isFalse = true
            int negativeX = -x; // negativeX = -6

            Com.NebulaLang.Core.Console.writeLine("x: " + x + ", y: " + y + ", z: " + z + ", isFalse: " + isFalse + ", negativeX: " + negativeX);

            // 5. Postfix Increment/Decrement
            int a = 10;
            int b = a++; // b = 10, a = 11
            int c = a--; // c = 11, a = 10

            Com.NebulaLang.Core.Console.writeLine("a: " + a + ", b: " + b + ", c: " + c);

            // 6. Binary Operators (Arithmetic, Comparison, Logical)
            int val1 = 10;
            int val2 = 5;
            bool result;

            result = (val1 + val2 == 15) && (val1 - val2 != 0); // true && true
            Com.NebulaLang.Core.Console.writeLine("Binary Op 1: " + result);

            result = (val1 * val2 > 40) || (val1 / val2 <= 1); // true || false
            Com.NebulaLang.Core.Console.writeLine("Binary Op 2: " + result);

            // 7. If-Else If-Else Statement
            int temperature = 25;
            if (temperature > 30) {
                Com.NebulaLang.Core.Console.writeLine("It's hot!");
            } else if (temperature >= 20 && temperature <= 30) {
                Com.NebulaLang.Core.Console.writeLine("It's pleasant.");
            } else {
                Com.NebulaLang.Core.Console.writeLine("It's cold!");
            }

            // 8. While Loop
            int whileCounter = 0;
            while (whileCounter < 3) {
                Com.NebulaLang.Core.Console.writeLine("While loop iteration: " + whileCounter);
                whileCounter++; // Postfix increment in loop
            }

            // 9. For Loop (traditional)
            for (int k = 0; k < 2; k++) { // Initializer, condition, increment operator
                Com.NebulaLang.Core.Console.writeLine("For loop iteration: " + k);
            }

            // 10. Object Instantiation (new) and Method Calls
            Point p1;
            p1 = new Point(1, 2); // Constructor call with arguments
            Point p2 = new Point(4, 6);

            double dist = p1.calculateDistance(p2); // Method call on object with qualified name
            Com.NebulaLang.Core.Console.writeLine("Distance between points: " + dist);

            bool p1IsOrigin = p1.isOrigin(); // Method call returning boolean
            Com.NebulaLang.Core.Console.writeLine("p1 is origin: " + p1IsOrigin);

            // 11. Nested blocks and complex expressions
            { // Anonymous block
                int nestedVar = (10 + 20) * (3 % 2); // Complex expression
                Com.NebulaLang.Core.Console.writeLine("Nested var: " + nestedVar);

                // Using readInt (simulated)
                int userInput = Com.NebulaLang.Core.Console.readInt();
                if (userInput > 5) {
                    Com.NebulaLang.Core.Console.writeLine("User input is greater than 5.");
                }
            }

            // 12. Return statement without value
            return; // Final return in main
            // No code should be here
        }

        // A private static helper method
        private static int add(int num1, int num2) {
            return num1 + num2;
        }

        // A method that can be called by 'this' (demonstrates member access on 'this')
        public String getGreeting() {
            String greeting = "Hello from Program class!";
            return greeting;
        }
    }
}
