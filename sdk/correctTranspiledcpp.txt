--- Directory Tree for: nebula ---
Located at: /home/juanpa/dev/java/nebula/sdk/nebula

/home/juanpa/dev/java/nebula/sdk/nebula
├── core
│   ├── Object.cpp
│   ├── Object.h
│   ├── String.cpp
│   └── String.h
├── Main.cpp
└── system
    ├── Console.cpp
    └── Console.h

3 directories, 7 files

--- File Contents (Recursive) ---
Main.cpp:
[AND the contents]
#include "system/Console.h"
#include "core/Object.h"
#include "core/String.h" // Ensure String is included if used directly

// Using declarations to make it easier to refer to classes, similar to Nebula's 'import'
using namespace nebula::io;
using namespace nebula::core;

namespace Program {

class Test {
public:
    static void main() {
        // In Nebula, 'new Object()' implies heap allocation. In C++, for simplicity
        // in this example, we'll use stack allocation for `testObject`.
        // For true heap allocation and management, `std::unique_ptr<Object> testObject = std::make_unique<Object>();`
        // or `std::shared_ptr<Object> testObject = std::make_shared<Object>();` would be used.
        Object testObject;

        // Using nebula::core::String for string literals
        Console::print(String("Hello from Nebula!"));
        Console::println(testObject.toString());

        int b = 1;
        int a = b;

        a++;    // a becomes 2
        a -= 2; // a becomes 0
        a %= 2; // a becomes 0 (0 % 2 is 0)

        // The result of `someFunc(a)` is an int, which is then added to `a`.
        // `someFunc(0)` returns -1. So, `-1 + 0` equals `-1`.
        Console::println(someFunc(a) + a);
        Console::println(true);
        Console::println(5 > 2); // This evaluates to `true`

        // `someFunc(2)` will print "true" but its return value is ignored here.
        someFunc(2);
    }

    // This function must return an `int` on all code paths in C++.
    // The original comment "//Can not retrurn" for the `if` branch is handled
    // by adding a placeholder return value (0 in this case) to ensure valid C++.
    static int someFunc(int a) {
        if (a > 1) {
            Console::println(String("true")); // Prints "true" followed by a newline
            return 0; // Placeholder return to satisfy C++'s requirement for non-void functions
        } else {
            return -1;
        }
    }
};

} // namespace Program

// The global main function, which is the entry point of the C++ application.
// It calls the `Program::Test::main()` method to start the Nebula program logic.
int main() {
    Program::Test::main();
    return 0;
}
system/Console.cpp:
[AND the contents]
#include "Console.h"

namespace nebula::io {

// print implementations
void Console::print(const nebula::core::Object& anything) {
    // Converts the Nebula Object to its String representation, then to std::string for printing.
    std::cout << static_cast<std::string>(anything.toString());
}
void Console::print(const nebula::core::String& anyString) {
    // Converts the Nebula String to std::string for printing.
    std::cout << static_cast<std::string>(anyString);
}
void Console::print(char character) {
    std::cout << character;
}
void Console::print(int number) {
    std::cout << number;
}
void Console::print(bool booleanValue) {
    // Uses std::boolalpha to print "true" or "false" instead of 1 or 0.
    std::cout << std::boolalpha << booleanValue;
}
void Console::print(float floatValue) {
    std::cout << floatValue;
}
void Console::print(double doubleValue) {
    std::cout << doubleValue;
}

// println implementations (add std::endl after printing)
void Console::println(const nebula::core::Object& anything) {
    std::cout << static_cast<std::string>(anything.toString()) << std::endl;
}
void Console::println(const nebula::core::String& anyString) {
    std::cout << static_cast<std::string>(anyString) << std::endl;
}
void Console::println(char character) {
    std::cout << character << std::endl;
}
void Console::println(int number) {
    std::cout << number << std::endl;
}
void Console::println(bool booleanValue) {
    std::cout << std::boolalpha << booleanValue << std::endl;
}
void Console::println(float floatValue) {
    std::cout << floatValue << std::endl;
}
void Console::println(double doubleValue) {
    std::cout << doubleValue << std::endl;
}

} // namespace nebula::io
system/Console.h:
[AND the contents]
#ifndef NEBULA_SYSTEM_CONSOLE_H
#define NEBULA_SYSTEM_CONSOLE_H

#include "../core/Object.h" // For Object type
#include "../core/String.h" // For String type
#include <iostream>             // For std::cout and std::endl

namespace nebula::io {

class Console {
public:
    // Static methods for printing to console (wrapper around std::cout).
    // These are overloaded to accept different Nebula types.

    // print methods (without newline)
    static void print(const nebula::core::Object& anything);
    static void print(const nebula::core::String& anyString);
    static void print(char character);
    static void print(int number);
    static void print(bool booleanValue);
    static void print(float floatValue);
    static void print(double doubleValue);

    // println methods (with newline)
    static void println(const nebula::core::Object& anything);
    static void println(const nebula::core::String& anyString);
    static void println(char character);
    static void println(int number);
    static void println(bool booleanValue);
    static void println(float floatValue);
    static void println(double doubleValue);
};

} // namespace nebula::io

#endif // NEBULA_SYSTEM_CONSOLE_H
core/Object.h:
[AND the contents]
#ifndef NEBULA_CORE_OBJECT_H
#define NEBULA_CORE_OBJECT_H

#include <string>
#include <typeinfo>

namespace nebula::core {

class String;

class Object {
public:
    // This virtual operator== takes a const Object&.
    // Derived classes will need to accept Object& to override this.
    // They can then dynamic_cast or use specific overloads for their own types.
    virtual bool operator==(const Object& other) const;

    virtual std::string hashCode() const;

    virtual String toString() const;

    virtual ~Object() = default;
};

} // namespace nebula::core

#endif // NEBULA_CORE_OBJECT_H
core/String.h:
[AND the contents]
#ifndef NEBULA_CORE_STRING_H
#define NEBULA_CORE_STRING_H

#include "Object.h"
#include <string>
#include <memory>

namespace nebula::core {

class String : public Object {
private:
    std::string m_value;

public:
    String();
    String(const char* chars);
    String(const std::string& str);
    String(const String& other);

    int length() const;

    String operator+(const String& other) const;

    // This is the correct override: it must take a 'const Object&'
    // to match the base class virtual method.
    bool operator==(const Object& other) const override;

    // You might still want a specific overload for comparing with other String objects
    // if that's more convenient or common in your Nebula-like syntax.
    // This *does not* override the Object's operator==, but is a new overload.
    bool operator==(const String& other) const;


    String toString() const override;

    std::string hashCode() const override;

    operator std::string() const;
};

} // namespace nebula::core

#endif // NEBULA_CORE_STRING_H
core/String.cpp:
[AND the contents]
#include "String.h"
#include <functional> // For std::hash

namespace nebula::core {

String::String() : m_value("") {}
String::String(const char* chars) : m_value(chars ? chars : "") {}
String::String(const std::string& str) : m_value(str) {}
String::String(const String& other) : m_value(other.m_value) {}

int String::length() const {
    return static_cast<int>(m_value.length());
}

String String::operator+(const String& other) const {
    return String(m_value + other.m_value);
}

// Implementation for the virtual override
bool String::operator==(const Object& other) const {
    // This is where you implement the 'is' keyword logic.
    // Check if 'other' is actually a 'String' (or convertible to one)
    // using dynamic_cast or typeid.
    const String* otherString = dynamic_cast<const String*>(&other);
    if (otherString) {
        // If it is a String, perform the value comparison.
        return m_value == otherString->m_value;
    }
    // If 'other' is not a String, they cannot be equal in this context.
    return false;
}

// Implementation for the non-virtual overload (if you choose to keep it)
bool String::operator==(const String& other) const {
    return m_value == other.m_value;
}

String String::toString() const {
    return *this;
}

std::string String::hashCode() const {
    return std::to_string(std::hash<std::string>{}(m_value));
}

String::operator std::string() const {
    return m_value;
}

} // namespace nebula::core
core/Object.cpp:
[AND the contents]
#include "Object.h"
#include "String.h" // Include String to define Object::toString

namespace nebula::core {

bool Object::operator==(const Object& other) const {
    // If 'is' means exact type comparison:
    if (typeid(*this) == typeid(other)) {
        // Default comparison for Object might not be meaningful in C++ without
        // specific identity or value properties.
        // For the base Object, we'll return false, assuming meaningful comparison
        // happens in derived classes based on their content.
        return false;
    }
    return false;
}

std::string Object::hashCode() const {
    // Returns a conceptual hash code, for real hash codes, it would involve
    // memory address or a more complex calculation based on state.
    return "0";
}

String Object::toString() const {
    // The default implementation returns the hash code as a String.
    return String(hashCode());
}

} // namespace nebula::core
--- End of Listing ---
