namespace nebula.core
{
    /// Represents an immutable sequence of characters.
    /// This is a native class wrapping std::string functionality.
    native class String extends Object
    {
        // The C++ implementation of this class is expected to have a private
        // 'std::string _data;' member. The wrappers below will access it.

        // Constructors are not wrappers; their implementation is defined in C++.
        // The generator will see these declarations and create the corresponding
        // empty C++ declarations in the header file.
        public String(){}
        public String(String other){}

        /// Returns the number of characters in the string.
        public wrapper int length() -> "static_cast<int>(this->_data.length())";

        /// Concatenates two strings, returning a new String object.
        public wrapper String operator+(String other) -> "std::make_shared<nebula::core::String>(this->_data + (${other} ? ${other}->_data : \"\"))";

        /// Overrides Object's equals for value comparison.
        public wrapper bool operator==(Object other) -> """(([&]() { auto other_str = std::dynamic_pointer_cast<nebula::core::String>(${other}); if (other_str) { return this->_data == other_str->_data; } return false; })());""";

        /// Overrides Object's toString to return the string itself.
        public wrapper string toString() -> "std::make_shared<nebula::core::String>(this->_data)";

        /// Overrides Object's hashCode to compute a hash from the string's content.
        public wrapper string hashCode() -> "std::make_shared<nebula::core::String>(std::to_string(std::hash<std::string>{}(this->_data)))";
    }
}
