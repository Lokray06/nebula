import nebula.io.Console;
import nebula.core.Object;
import nebula.core.Math;

alias println Console.println;
alias print Console.print;

namespace Program
{
    class Test
    {
        static void main()
        {
            int[] numbers = {1,2,3,4,5};

            // Todo: implement
            /*

            // Todo: Casting
            int castedint = (int)3.4; // Casting a double to an int

            // Todo: Ternary operator
            println((numbers.size > 0 || numbers == null) ? numbers.size : "numbers is empty / uninitialized.");

            // Todo: Named and optional parameters
            // In this constructor the optionalParamValue of type int is optional, with a default value of 3
            public Class(param1: float, optionalParam: int? = 3){}

            // This is instantiated with param1 = 3.4f and optionalParam = 3
            Class instance1 = new Class(param1: 3.4f);

            // As the parameters are named, you're not tied to the declared order:
            // This is instantiated with param1 = 3.4f and optionalParam = 6
            Class instance1 = new Class(optionalParam: 6, param1: 3.4f);

            // Todo: Better primitive types / names
            */  

            println("--- Nebula Language Feature Tests ---");
            println("");

            // --- Loop Tests ---
            println("--- For Loop Tests ---");

            // Standard for loop
            println("Standard for (int i = 0; i < 3; i++) { ... }");
            for (int i = 0; i < 3; i++)
            {
                print("i: ");
                println(i);
            }
            println("");

            // For loop with sugar: for (i < n) (equivalent to for (int i = 0; i < n; i++))
            println("For loop sugar: for (i < 2) { ... }");
            int loopLimit = 2;
            for (i < loopLimit) // This should implicitly declare 'i' and initialize to 0
            {
                print("i: ");
                println(i);
            }
            println("");

            // For loop with sugar: for (i = start < n) (equivalent to for (int i = start; i < n; i++))
            println("For loop sugar: for (j = 1 < 4) { ... }");
            int anotherLoopLimit = 4;
            for (j = 1 < anotherLoopLimit) // This should implicitly declare 'j' and initialize to 1
            {
                print("j: ");
                println(j);
            }
            println("");

            // While loop
            println("--- While Loop Test ---");
            int counter = 0;
            while (counter < 3)
            {
                print("Counter: ");
                println(counter);
                counter++; // Increment
            }
            println("");

            // --- Array Tests ---
            println("--- Array Declaration and Access Tests ---");

            // Declare and initialize an integer array with a size
            int[] intArray = new int[5];
            println("Declared int[] intArray = new int[5];");
            println("Default value of intArray[0]: " + intArray[0]); // Should be 0 by default

            // Assign values to array elements
            intArray[0] = 10;
            intArray[1] = 20;
            intArray[2] = 30;
            println("Assigned intArray[0] = 10, intArray[1] = 20, intArray[2] = 30;");
            println("intArray[0]: " + intArray[0]);
            println("intArray[1]: " + intArray[1]);
            println("");

            // Declare and initialize a string array with an initializer list
            string[] stringArray = {"Hello", "Nebula", "World"};
            println("Declared string[] stringArray = {\"Hello\", \"Nebula\", \"World\"};");
            println("stringArray[0]: " + stringArray[0]);
            println("stringArray[1]: " + stringArray[1]);
            println("stringArray[2]: " + stringArray[2]);
            println("");

            // Accessing array size
            println("--- Array size Tests ---");
            println("intArray.size: " + intArray.size);
            println("stringArray.size: " + stringArray.size);
            println("");

            // Loop through an array
            println("--- Looping through Arrays ---");
            println("Looping intArray:");
            for (int k = 0; k < intArray.size; k++)
            {
                print("intArray[");
                print(k);
                print("]: ");
                println(intArray[k]);
            }
            println("");

            println("Looping stringArray:");
            for (int l = 0; l < stringArray.size; l++)
            {
                print("stringArray[");
                print(l);
                print("]: ");
                println(stringArray[l]);
            }
            println("");


            // --- Math Utility Class Tests (Existing from previous turns) ---
            println("--- Nebula Math Utility Class Tests ---");

            // Test Math Constants
            println("Math.PI: " + Math.PI);
            println("Math.E: " + Math.E);
            println(""); // New line

            // Test Abs methods
            println("--- Abs Tests ---");
            println("Abs(-10): " + Math.Abs(-10));
            println("Abs(5): " + Math.Abs(5));
            println("Abs(-10.5): " + Math.Abs(-10.5));
            println("Abs(5.5): " + Math.Abs(5.5));
            println("");

            // Test Max methods
            println("--- Max Tests ---");
            println("Max(10, 20): " + Math.Max(10, 20));
            println("Max(30, 5): " + Math.Max(30, 5));
            println("Max(10.1, 10.2): " + Math.Max(10.1, 10.2));
            println("Max(20.5, 15.0): " + Math.Max(20.5, 15.0));
            println("");

            // Test Min methods
            println("--- Min Tests ---");
            println("Min(10, 20): " + Math.Min(10, 20));
            println("Min(30, 5): " + Math.Min(30, 5));
            println("Min(10.1, 10.2): " + Math.Min(10.1, 10.2));
            println("Min(20.5, 15.0): " + Math.Min(20.5, 15.0));
            println("");

            // Test Sqrt method
            println("--- Sqrt Test ---");
            println("Sqrt(25.0): " + Math.Sqrt(25.0));
            println("Sqrt(2.0): " + Math.Sqrt(2.0));
            println("Sqrt(-9.0): " + Math.Sqrt(-9.0)); // Will print warning
            println("");

            // Test Pow method
            println("--- Pow Test ---");
            println("Pow(2.0, 3.0): " + Math.Pow(2.0, 3.0));
            println("Pow(5.0, 0.0): " + Math.Pow(5.0, 0.0));
            println("Pow(4.0, 0.5): " + Math.Pow(4.0, 0.5));
            println("");

            // Test Trigonometric functions
            println("--- Trigonometric Tests ---");
            println("Cos(0.0): " + Math.Cos(0.0));
            println("Sin(Math.PI / 2.0): " + Math.Sin(Math.PI / 2.0));
            println("Tan(Math.PI / 4.0): " + Math.Tan(Math.PI / 4.0));
            println("");

            // Test Round, Ceil, Floor
            println("--- Round, Ceil, Floor Tests ---");
            println("Round(4.5): " + Math.Round(4.5)); // Will print warning due to current limitation
            println("Round(4.1): " + Math.Round(4.1));
            println("Round(4.9): " + Math.Round(4.9));
            println("Ceil(4.1): " + Math.Ceil(4.1));
            println("Floor(4.9): " + Math.Floor(4.9));
            println("");

            // Test Logarithm and Exponential functions
            println("--- Log/Exp Tests ---");
            println("Log(Math.E): " + Math.Log(Math.E));
            println("Log(1.0): " + Math.Log(1.0));
            println("Log10(100.0): " + Math.Log10(100.0));
            println("Log(0.0): " + Math.Log(0.0)); // Will print warning
            println("Exp(1.0): " + Math.Exp(1.0));
            println("");

            // Test Atan2
            println("--- Atan2 Test ---");
            println("Atan2(1.0, 1.0): " + Math.Atan2(1.0, 1.0));
            println("Atan2(0.0, -1.0): " + Math.Atan2(0.0, -1.0));
            println("");

            // Test Clamp methods
            println("--- Clamp Tests ---");
            println("Clamp(5, 0, 10): " + Math.Clamp(5, 0, 10));
            println("Clamp(-2, 0, 10): " + Math.Clamp(-2, 0, 10));
            println("Clamp(12, 0, 10): " + Math.Clamp(12, 0, 10));
            println("Clamp(5.5, 0.0, 10.0): " + Math.Clamp(5.5, 0.0, 10.0));
            println("Clamp(-2.5, 0.0, 10.0): " + Math.Clamp(-2.5, 0.0, 10.0));
            println("Clamp(12.5, 0.0, 10.0): " + Math.Clamp(12.5, 0.0, 10.0));
            println("");

            println("--- All Tests Completed ---");
        }
    }
}
